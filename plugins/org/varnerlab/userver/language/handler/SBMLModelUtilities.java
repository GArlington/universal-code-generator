package org.varnerlab.userver.language.handler;

//import statements -
import java.util.Hashtable;
import java.util.Properties;
import java.util.Vector;


import org.sbml.libsbml.*;
import org.varnerlab.server.transport.LoadXMLPropFile;

public class SBMLModelUtilities {

	public static void dumpBoundsFileToDisk(Properties _propTable,StringBuffer buffer) throws Exception {
        // Ok, dump this to disk -
        
		// Create the path string -
		String strPath = "./"+_propTable.getProperty("PATH_NETWORK_DIRECTORY")+"/"+_propTable.getProperty("OUTPUT_BOUNDS_FILENAME");
		GIOL.write(strPath,buffer);
    }
	
	// Generate a vector of reacrions -
	public static void buildReactionStringVector(Model model, Vector vecReactions,Vector vecOut) throws Exception
	{
		StringBuffer buffer = new StringBuffer();
		int NUMBER_OF_RATES = (int)vecReactions.size();
		for (int index=0;index<NUMBER_OF_RATES;index++)
		{
			// Get the reaction -
			Reaction rxn = (Reaction)vecReactions.get(index);
			
			// Formulate the reaction string -
			ListOf reactant_list = rxn.getListOfReactants();
			int NUMBER_REACTANTS = (int)reactant_list.size();
			
			ListOf product_list = rxn.getListOfProducts();
			int NUMBER_PRODUCTS = (int)product_list.size();
			
			// buffer.append("// ");
			// buffer.append(index);
			// buffer.append("\t");
			for (int reactant_index=0;reactant_index<NUMBER_REACTANTS;reactant_index++)
			{
				SpeciesReference species_ref = (SpeciesReference)reactant_list.get(reactant_index);
                String strReactant = species_ref.getSpecies();
                buffer.append(strReactant);
                
                if (reactant_index<NUMBER_REACTANTS-1)
                {
                	buffer.append("+");
                }
                else
                {
                	buffer.append(" = ");
                }
			}
			
			for (int reactant_index=0;reactant_index<NUMBER_PRODUCTS;reactant_index++)
			{
				SpeciesReference species_ref = (SpeciesReference)product_list.get(reactant_index);
                String strReactant = species_ref.getSpecies();
                buffer.append(strReactant);
                
                if (reactant_index<NUMBER_PRODUCTS-1)
                {
                	buffer.append("+");
                }
			}
			
			//buffer.append("\n");
			vecOut.addElement(buffer.toString());
			buffer.delete(0, buffer.length());
		}
	}
	
	// write a reaction list to disk for debug -
	public static void buildDebugReactionListBuffer(StringBuffer buffer,Model model, Vector vecReactions) throws Exception
	{
		int NUMBER_OF_RATES = (int)vecReactions.size();
		for (int index=0;index<NUMBER_OF_RATES;index++)
		{
			// Get the reaction -
			Reaction rxn = (Reaction)vecReactions.get(index);
			
			// Formulate the reaction string -
			ListOf reactant_list = rxn.getListOfReactants();
			int NUMBER_REACTANTS = (int)reactant_list.size();
			
			ListOf product_list = rxn.getListOfProducts();
			int NUMBER_PRODUCTS = (int)product_list.size();
			
			buffer.append("// ");
			buffer.append(index);
			buffer.append("\t");
			for (int reactant_index=0;reactant_index<NUMBER_REACTANTS;reactant_index++)
			{
				SpeciesReference species_ref = (SpeciesReference)reactant_list.get(reactant_index);
                String strReactant = species_ref.getSpecies();
                buffer.append(strReactant);
                
                if (reactant_index<NUMBER_REACTANTS-1)
                {
                	buffer.append("+");
                }
                else
                {
                	buffer.append(" = ");
                }
			}
			
			for (int reactant_index=0;reactant_index<NUMBER_PRODUCTS;reactant_index++)
			{
				SpeciesReference species_ref = (SpeciesReference)product_list.get(reactant_index);
                String strReactant = species_ref.getSpecies();
                buffer.append(strReactant);
                
                if (reactant_index<NUMBER_PRODUCTS-1)
                {
                	buffer.append("+");
                }
			}
			
			buffer.append("\n");
			
		}
	}
	
	
	// Build the data file for the case when the reactions were expanded (and we are assming mass action kinetics)
	public static void buildDataFileBuffer(StringBuffer datafile,Model model,LoadXMLPropFile propTree,Vector<Reaction> vecReactions) throws Exception
	{
		String strDataFileNameRaw = (String)propTree.getProperty("//DataFile/datafile_filename/text()");
    	int INT_TO_DOT = strDataFileNameRaw.indexOf(".");
    	String strDataFileName = strDataFileNameRaw.substring(0, INT_TO_DOT);
    	
    	// Put in the header and go forward my undercover brotha...
        datafile.append("function DF=");
        datafile.append(strDataFileName);
        datafile.append("(TSTART,TSTOP,Ts,INDEX)\n");
        datafile.append("% Machine generated by Universal.\n");
        datafile.append("\n");
        datafile.append("% Load the stoichiometric matrix --\n");
        datafile.append("S=load('");
       
        // I need to get the file name, not the entire path -
        String strSTMNameRaw = (String)propTree.getProperty("//StoichiometricMatrix/stoichiometric_matrix_filename/text()");
    	String strSTMPath = (String)propTree.getProperty("//StoichiometricMatrix/stoichiometric_matrix_path/text()");
        String strWorkingDirectory = (String)propTree.getProperty("//working_directory/text()");
        String strPathToSTMFile = "";
        if (!strSTMPath.isEmpty())
        {
        	strPathToSTMFile = strWorkingDirectory+"/"+strSTMPath+"/"+strSTMNameRaw;
        }
        else
        {
        	strPathToSTMFile = strWorkingDirectory+"/"+strSTMNameRaw;
        }
        
    	//INT_TO_DOT = strSTMNameRaw.indexOf(".");
    	//String strSTMName = strSTMNameRaw.substring(0, INT_TO_DOT);
                
        datafile.append(strPathToSTMFile);
        datafile.append("');\n");
        datafile.append("[NROWS,NCOLS]=size(S);\n");
        datafile.append("\n");
        datafile.append("% Formulate the rate constant vector k --\n");
        datafile.append("k=zeros(NCOLS,1);\n");
        datafile.append("\n");
        datafile.append("% Parameter vector --");
        datafile.append("\n");
        
        // Put the initial values of parameters -
        Vector vecOut = new Vector();
        SBMLModelUtilities.buildReactionStringVector(model, vecReactions, vecOut);
        datafile.append("k=[\n");
        ListOf parameter_list = model.getListOfParameters();
        int NUMBER_OF_PARAMETERS = (int)model.getNumParameters();
        for (int pindex=0;pindex<NUMBER_OF_PARAMETERS;pindex++)
        {
        	
        	Parameter parameter = (Parameter)parameter_list.get(pindex);        
            Reaction rate = (Reaction)vecReactions.get(pindex);
            
            datafile.append("\t");
            datafile.append(parameter.getValue());
            datafile.append("\t;\t%\t");
            datafile.append(pindex+1);
            datafile.append("\t");
            datafile.append(rate.getName());
            datafile.append("\t");
            datafile.append(vecOut.get(pindex));
            datafile.append("\n");
        }
        datafile.append("];\n");
        datafile.append("\n");
        datafile.append("% Initial conditions --\n");
        
        // Put the initial condition -
        datafile.append("IC=[\n");
        ListOf species_list = model.getListOfSpecies();
        int NUMBER_OF_SPECIES = (int)species_list.size();
        for (int pindex=0;pindex<NUMBER_OF_SPECIES;pindex++)
        {
            Species species = (Species)species_list.get(pindex);
            datafile.append("\t");
            datafile.append(species.getInitialAmount());
            datafile.append("\t;%\t");
            datafile.append(pindex+1);
            datafile.append("\t");
            datafile.append(species.getId());
            datafile.append("\t");
            datafile.append(species.getName());
            datafile.append("\n");
        }
        
        datafile.append("];\n");
        datafile.append("\n");
        datafile.append("% Load parameter sets from disk -\n");
        datafile.append("NPARAMETERS=length(k);\n");
        datafile.append("NSTATES=length(IC);\n");
        datafile.append("kV = [k ; IC];\n");
        datafile.append("% Ok, override the choice of parameters above, load from disk -\n");
        datafile.append("if (~isempty(INDEX))\n");
        datafile.append("\tcmd=['load PSET_',num2str(INDEX),'.mat'];\n");
        datafile.append("\teval(cmd);\n");
        datafile.append("\tkV = kP;\n");
        datafile.append("\t% get k and IC -\n");
        datafile.append("\tk=kV(1:NPARAMETERS);\n");
        datafile.append("\tIC=kV((NPARAMETERS+1):end);\n");
        datafile.append("end;\n");
        datafile.append("\n");
        
        datafile.append("% =========== DO NOT EDIT BELOW THIS LINE ==============\n");
        datafile.append("DF.STOICHIOMETRIC_MATRIX=S;\n");
        datafile.append("DF.RATE_CONSTANT_VECTOR=k;\n");
        datafile.append("DF.INITIAL_CONDITIONS=IC;\n");
        datafile.append("DF.NUMBER_PARAMETERS=NPARAMETERS;\n");
        datafile.append("DF.NUMBER_OF_STATES=NSTATES;\n");
        datafile.append("DF.PARAMETER_VECTOR=kV;\n");
        datafile.append("% ======================================================\n");
        datafile.append("return;\n");
	}
	
	// Build the data file - these are always the same, so put here
    public static void buildDataFileBuffer(StringBuffer datafile,Model model,LoadXMLPropFile propTree) throws Exception
    {
        	
    	String strDataFileNameRaw = (String)propTree.getProperty("//DataFile/datafile_filename/text()");
    	int INT_TO_DOT = strDataFileNameRaw.indexOf(".");
    	String strDataFileName = strDataFileNameRaw.substring(0, INT_TO_DOT);
    	
    	// Put in the header and go forward my undercover brotha...
        datafile.append("function DF=");
        datafile.append(strDataFileName);
        datafile.append("(TSTART,TSTOP,Ts,INDEX)\n");
        datafile.append("% Machine generated by Universal.\n");
        datafile.append("\n");
        datafile.append("% Load the stoichiometric matrix --\n");
        datafile.append("S=load('");
       
        // I need to get the file name, not the entire path -
        String strSTMNameRaw = (String)propTree.getProperty("//StoichiometricMatrix/stoichiometric_matrix_filename/text()");
    	String strSTMPath = (String)propTree.getProperty("//StoichiometricMatrix/stoichiometric_matrix_path/text()");
        String strWorkingDirectory = (String)propTree.getProperty("//working_directory/text()");
        String strPathToSTMFile = "";
        if (!strSTMPath.isEmpty())
        {
        	strPathToSTMFile = strWorkingDirectory+"/"+strSTMPath+"/"+strSTMNameRaw;
        }
        else
        {
        	strPathToSTMFile = strWorkingDirectory+"/"+strSTMNameRaw;
        }
        
    	//INT_TO_DOT = strSTMNameRaw.indexOf(".");
    	//String strSTMName = strSTMNameRaw.substring(0, INT_TO_DOT);
                
        datafile.append(strPathToSTMFile);
        datafile.append("');\n");
        datafile.append("[NROWS,NCOLS]=size(S);\n");
        datafile.append("\n");
        datafile.append("% Formulate the rate constant vector k --\n");
        datafile.append("k=zeros(NCOLS,1);\n");
        datafile.append("\n");
        datafile.append("% Parameter vector --");
        datafile.append("\n");
        
        // Put the initial values of parameters -
        datafile.append("k=[\n");
        ListOf parameter_list = model.getListOfParameters();
        ListOf rate_list = model.getListOfReactions();
        int NUMBER_OF_PARAMETERS = (int)model.getNumParameters();
        for (int pindex=0;pindex<NUMBER_OF_PARAMETERS;pindex++)
        {
            Parameter parameter = (Parameter)parameter_list.get(pindex);        
            Reaction rate = (Reaction)rate_list.get(pindex);
            
            datafile.append("\t");
            datafile.append(parameter.getValue());
            datafile.append("\t;\t%\t");
            datafile.append(pindex+1);
            datafile.append("\t");
            datafile.append(rate.getName());
            datafile.append("\n");
        }
        datafile.append("];\n");
        datafile.append("\n");
        datafile.append("% Initial conditions --\n");
        
        // Put the initial condition -
        datafile.append("IC=[\n");
        ListOf species_list = model.getListOfSpecies();
        int NUMBER_OF_SPECIES = (int)species_list.size();
        for (int pindex=0;pindex<NUMBER_OF_SPECIES;pindex++)
        {
            Species species = (Species)species_list.get(pindex);
            datafile.append("\t");
            datafile.append(species.getInitialAmount());
            datafile.append("\t;%\t");
            datafile.append(pindex+1);
            datafile.append("\t");
            datafile.append(species.getId());
            datafile.append("\t");
            datafile.append(species.getName());
            datafile.append("\n");
        }
        
        datafile.append("];\n");
        datafile.append("\n");
        datafile.append("% Load parameter sets from disk -\n");
        datafile.append("NPARAMETERS=length(k);\n");
        datafile.append("NSTATES=length(IC);\n");
        datafile.append("kV = [k ; IC];\n");
        datafile.append("% Ok, override the choice of parameters above, load from disk -\n");
        datafile.append("if (~isempty(INDEX))\n");
        datafile.append("\tcmd=['load PSET_',num2str(INDEX),'.mat'];\n");
        datafile.append("\teval(cmd);\n");
        datafile.append("\tkV = kP;\n");
        datafile.append("\t% get k and IC -\n");
        datafile.append("\tk=kV(1:NPARAMETERS);\n");
        datafile.append("\tIC=kV((NPARAMETERS+1):end);\n");
        datafile.append("end;\n");
        datafile.append("\n");
        
        datafile.append("% =========== DO NOT EDIT BELOW THIS LINE ==============\n");
        datafile.append("DF.STOICHIOMETRIC_MATRIX=S;\n");
        datafile.append("DF.RATE_CONSTANT_VECTOR=k;\n");
        datafile.append("DF.INITIAL_CONDITIONS=IC;\n");
        datafile.append("DF.NUMBER_PARAMETERS=NPARAMETERS;\n");
        datafile.append("DF.NUMBER_OF_STATES=NSTATES;\n");
        datafile.append("DF.PARAMETER_VECTOR=kV;\n");
        datafile.append("% ======================================================\n");
        datafile.append("return;\n");
        
    }
    
    public static void dumpKineticsToDisk(StringBuffer data_buffer,LoadXMLPropFile _xmlPropTree) throws Exception {
    	// I have populated the string buffer, dump that mofo
        String strWorkingDir = _xmlPropTree.getProperty("//working_directory/text()");
        String strFileName = _xmlPropTree.getProperty("//KineticsFunction/kinetics_filename/text()");
        String strFilePath = _xmlPropTree.getProperty("//KineticsFunction/kinetics_path/text()");
        
        String strSBMLFile = "";
        if (strFilePath.isEmpty())
        {
        	strSBMLFile = strWorkingDir+"/"+strFileName;
        }
        else
        {
        	strSBMLFile = strWorkingDir+"/"+strFilePath+"/"+strFileName;
        }
        
        GIOL.write(strSBMLFile,data_buffer);
    }
    
    public static void dumpDataFileToDisk(StringBuffer data_buffer,LoadXMLPropFile _xmlPropTree) throws Exception {
    	// I have populated the string buffer, dump that mofo
        String strWorkingDir = _xmlPropTree.getProperty("//working_directory/text()");
        String strFileName = _xmlPropTree.getProperty("//DataFile/datafile_filename/text()");
        String strFilePath = _xmlPropTree.getProperty("//DataFile/datafile_path/text()");
        
        String strSBMLFile = "";
        if (strFilePath.isEmpty())
        {
        	strSBMLFile = strWorkingDir+"/"+strFileName;
        }
        else
        {
        	strSBMLFile = strWorkingDir+"/"+strFilePath+"/"+strFileName;
        }
        
        GIOL.write(strSBMLFile,data_buffer);
    }
    
    public static void dumpSEBufferToDisk(StringBuffer data_buffer,LoadXMLPropFile _xmlPropTree,String strFileName) throws Exception
    {
    	// I have populated the string buffer, dump that mofo
        String strWorkingDir = _xmlPropTree.getProperty("//working_directory/text()");
        String strFilePath = "";
        String strSBMLFile = "";
        
        if (strFilePath.isEmpty())
        {
        	strSBMLFile = strWorkingDir+"/"+strFileName;
        }
        else
        {
        	strSBMLFile = strWorkingDir+"/"+strFilePath+"/"+strFileName;
        }
        
        GIOL.write(strSBMLFile,data_buffer);
    }
    
    public static void dumpGeneralBufferToDisk(StringBuffer data_buffer,LoadXMLPropFile _xmlPropTree) throws Exception
    {
    	// I have populated the string buffer, dump that mofo
    	String strWorkingDir = _xmlPropTree.getProperty("//working_directory/text()");
        String strDotFileName = _xmlPropTree.getProperty("//OutputFileName/output_filename/text()");
        String strDotFilePath = _xmlPropTree.getProperty("//OutputFileName/output_file_path/text()");
        
        String strSBMLFile = "";
        if (strDotFilePath.isEmpty())
        {
        	strSBMLFile = strWorkingDir+"/"+strDotFileName;
        }
        else
        {
        	strSBMLFile = strWorkingDir+"/"+strDotFilePath+"/"+strDotFileName;
        }
        
        GIOL.write(strSBMLFile,data_buffer);
    }

    public static void dumpDebugFileToDisk(StringBuffer data_buffer,LoadXMLPropFile _xmlPropTree) throws Exception 
    {
    	// I have populated the string buffer, dump that mofo
        String strWorkingDir = _xmlPropTree.getProperty("//working_directory/text()");
        String strFileName = "Debug.txt";
        String strFilePath = _xmlPropTree.getProperty("//DataFile/datafile_path/text()");
        
        String strSBMLFile = "";
        if (strFilePath.isEmpty())
        {
        	strSBMLFile = strWorkingDir+"/"+strFileName;
        }
        else
        {
        	strSBMLFile = strWorkingDir+"/"+strFilePath+"/"+strFileName;
        }
        
        GIOL.write(strSBMLFile,data_buffer);
    }
    
    public static void dumpStoichiometricMatrixToDisk(double[][] dblSTMatrix,LoadXMLPropFile _xmlPropTree,Model model_wrapper,Vector<Reaction> vecReactions) throws Exception
    {
        // Method attributes -
        StringBuffer buffer = new StringBuffer();
        int NUMBER_OF_SPECIES = 0; 
        int NUMBER_OF_RATES = 0;
        
        // Get the system dimension -
        NUMBER_OF_SPECIES = (int)model_wrapper.getNumSpecies(); 
        NUMBER_OF_RATES = (int)vecReactions.size(); 
        
        for (int scounter=0;scounter<NUMBER_OF_SPECIES;scounter++)
        {
            for (int rcounter=0;rcounter<NUMBER_OF_RATES;rcounter++)
            {
                buffer.append(dblSTMatrix[scounter][rcounter]);
                buffer.append("\t");
            }
            
            buffer.append("\n");
        }
        
        // Get the path to the place where I'm going to dump the stmatrix -
        String strWorkingDir = _xmlPropTree.getProperty("//working_directory/text()");
        String strFileName = _xmlPropTree.getProperty("//StoichiometricMatrix/stoichiometric_matrix_filename/text()");
        String strFilePath = _xmlPropTree.getProperty("//StoichiometricMatrix/stoichiometric_matrix_path/text()");
        
        String strSBMLFile = "";
        if (strFilePath.isEmpty())
        {
        	strSBMLFile = strWorkingDir+"/"+strFileName;
        }
        else
        {
        	strSBMLFile = strWorkingDir+"/"+strFilePath+"/"+strFileName;
        }
        
        GIOL.write(strSBMLFile,buffer);
        
        // Get the path and dump -2- disk 
        //String strWorkingDir = (String)_propTable.get("WORKING_DIRECTORY_NAME");
        //String strFileName = (String)_propTable.get("OUTPUT_STM_FILENAME");
        
        //GIOL.write(strWorkingDir+strFileName,buffer);
    }

    
    public static void dumpMassBalancesToDisk(StringBuffer massbalances,LoadXMLPropFile _xmlPropTree) throws Exception
    {
    	// I have populated the string buffer, dump that mofo
        String strWorkingDir = _xmlPropTree.getProperty("//working_directory/text()");
        String strFileName = _xmlPropTree.getProperty("//MassBalanceFunction/massbalance_filename/text()");
        String strFilePath = _xmlPropTree.getProperty("//MassBalanceFunction/massbalance_path/text()");
        
        String strSBMLFile = "";
        if (strFilePath.isEmpty())
        {
        	strSBMLFile = strWorkingDir+"/"+strFileName;
        }
        else
        {
        	strSBMLFile = strWorkingDir+"/"+strFilePath+"/"+strFileName;
        }
        
        GIOL.write(strSBMLFile,massbalances);
    	
    }
    
    public static void dumpAdjDriverFileToDisk(StringBuffer massbalances,LoadXMLPropFile _xmlPropTree) throws Exception
    {
    	// I have populated the string buffer, dump that mofo
        String strWorkingDir = _xmlPropTree.getProperty("//working_directory/text()");
        String strFileName = _xmlPropTree.getProperty("//SensitivityAnalysis/adjoint_driver_filename/text()");
        String strFilePath = _xmlPropTree.getProperty("//SensitivityAnalysis/adjoint_driver_path/text()");
        
        String strSBMLFile = "";
        if (strFilePath.isEmpty())
        {
        	strSBMLFile = strWorkingDir+"/"+strFileName;
        }
        else
        {
        	strSBMLFile = strWorkingDir+"/"+strFilePath+"/"+strFileName;
        }
        
        GIOL.write(strSBMLFile,massbalances);
    	
    }
    
    public static void dumpAdjFunctionFileToDisk(StringBuffer massbalances,LoadXMLPropFile _xmlPropTree) throws Exception
    {
    	// I have populated the string buffer, dump that mofo
        String strWorkingDir = _xmlPropTree.getProperty("//working_directory/text()");
        String strFileName = _xmlPropTree.getProperty("//SensitivityAnalysis/adjoint_equations_filename/text()");
        String strFilePath = _xmlPropTree.getProperty("//SensitivityAnalysis/adjoint_equations_path/text()");
        
        String strSBMLFile = "";
        if (strFilePath.isEmpty())
        {
        	strSBMLFile = strWorkingDir+"/"+strFileName;
        }
        else
        {
        	strSBMLFile = strWorkingDir+"/"+strFilePath+"/"+strFileName;
        }
        
        GIOL.write(strSBMLFile,massbalances);
    	
    }
    
    public static void dumpDriverToDisk(StringBuffer driver,LoadXMLPropFile _xmlPropTree) throws Exception
    {
        // I have populated the string buffer, dump that mofo
        String strWorkingDir = _xmlPropTree.getProperty("//working_directory/text()");
        String strFileName = _xmlPropTree.getProperty("//DriverFile/driver_filename/text()");
        String strFilePath = _xmlPropTree.getProperty("//DriverFile/driver_path/text()");
        
        String strSBMLFile = "";
        if (strFilePath.isEmpty())
        {
        	strSBMLFile = strWorkingDir+"/"+strFileName;
        }
        else
        {
        	strSBMLFile = strWorkingDir+"/"+strFilePath+"/"+strFileName;
        }
        
        GIOL.write(strSBMLFile,driver);
    }
    
    public static void dumpBuildFileToDisk(StringBuffer driver,LoadXMLPropFile _xmlPropTree) throws Exception
    {
        // I have populated the string buffer, dump that mofo
        String strWorkingDir = _xmlPropTree.getProperty("//working_directory/text()");
        String strFileName = _xmlPropTree.getProperty("//BuildFile/build_filename/text()");
        String strFilePath = _xmlPropTree.getProperty("//BuildFile/build_path/text()");
        
        String strSBMLFile = "";
        if (strFilePath.isEmpty())
        {
        	strSBMLFile = strWorkingDir+"/"+strFileName;
        }
        else
        {
        	strSBMLFile = strWorkingDir+"/"+strFilePath+"/"+strFileName;
        }
        
        GIOL.write(strSBMLFile,driver);
    }
    
    public static void dumpJacobianToDisk(StringBuffer driver,LoadXMLPropFile _xmlPropTree) throws Exception
    {
        // I have populated the string buffer, dump that mofo
        String strWorkingDir = _xmlPropTree.getProperty("//working_directory/text()");
        String strFileName = _xmlPropTree.getProperty("//MassBalanceFunction/jacobian_filename/text()");
        String strFilePath = _xmlPropTree.getProperty("//MassBalanceFunction/jacobian_path/text()");
        
        String strSBMLFile = "";
        if (strFilePath.isEmpty())
        {
        	strSBMLFile = strWorkingDir+"/"+strFileName;
        }
        else
        {
        	strSBMLFile = strWorkingDir+"/"+strFilePath+"/"+strFileName;
        }
        
        GIOL.write(strSBMLFile,driver);
    }
    
    public static void dumpBMatrixToDisk(StringBuffer driver,LoadXMLPropFile _xmlPropTree) throws Exception
    {
        // I have populated the string buffer, dump that mofo
        String strWorkingDir = _xmlPropTree.getProperty("//working_directory/text()");
        String strFileName = _xmlPropTree.getProperty("//MassBalanceFunction/bmatrix_filename/text()");
        String strFilePath = _xmlPropTree.getProperty("//MassBalanceFunction/bmatrix_path/text()");
        
        String strSBMLFile = "";
        if (strFilePath.isEmpty())
        {
        	strSBMLFile = strWorkingDir+"/"+strFileName;
        }
        else
        {
        	strSBMLFile = strWorkingDir+"/"+strFilePath+"/"+strFileName;
        }
        
        GIOL.write(strSBMLFile,driver);
    }
    
    public static void dumpInputFunctionToDisk(StringBuffer driver,LoadXMLPropFile _xmlPropTree) throws Exception
    {
        // I have populated the string buffer, dump that mofo
        String strWorkingDir = _xmlPropTree.getProperty("//working_directory/text()");
        String strFileName = _xmlPropTree.getProperty("//InputFunction/input_function_filename/text()");
        String strFilePath = _xmlPropTree.getProperty("//InputFunction/input_function_path/text()");
        
        String strSBMLFile = "";
        if (strFilePath.isEmpty())
        {
        	strSBMLFile = strWorkingDir+"/"+strFileName;
        }
        else
        {
        	strSBMLFile = strWorkingDir+"/"+strFilePath+"/"+strFileName;
        }
        
        GIOL.write(strSBMLFile,driver);
    }
    
    public static void dumpSimulationFunctionToDisk(StringBuffer driver,LoadXMLPropFile _xmlPropTree,String strExpID) throws Exception
    {
    	// I have populated the string buffer, dump that mofo
        String strWorkingDir = _xmlPropTree.getProperty("//working_directory/text()");
        
        String strSBMLFile = "";
        strSBMLFile = strWorkingDir+"/SIM_"+strExpID+".m";
        
        GIOL.write(strSBMLFile,driver);
    }
    
    public static void dumpErrorFunctionToDisk(StringBuffer driver,LoadXMLPropFile _xmlPropTree,String strExpID) throws Exception
    {
    	// I have populated the string buffer, dump that mofo
        String strWorkingDir = _xmlPropTree.getProperty("//working_directory/text()");
        
        String strSBMLFile = "";
        strSBMLFile = strWorkingDir+"/ERR_"+strExpID+".m";
        
        GIOL.write(strSBMLFile,driver);
    }
    
    public static void dumpTestSimFunctionToDisk(StringBuffer driver,LoadXMLPropFile _xmlPropTree,String strExpID) throws Exception
    {
    	// I have populated the string buffer, dump that mofo
        String strWorkingDir = _xmlPropTree.getProperty("//working_directory/text()");
        
        String strSBMLFile = "";
        strSBMLFile = strWorkingDir+"/TEST_SIM_"+strExpID+".m";
        
        GIOL.write(strSBMLFile,driver);
    }
    
    public static void dumpExpDataStructToDisk(StringBuffer driver,LoadXMLPropFile _xmlPropTree) throws Exception
    {
        // I have populated the string buffer, dump that mofo
        String strWorkingDir = _xmlPropTree.getProperty("//working_directory/text()");
        String strFileName = _xmlPropTree.getProperty("//experimental_data_structure_filename/text()");
        String strFilePath = "";
        
        String strSBMLFile = "";
        if (strFilePath.isEmpty())
        {
        	strSBMLFile = strWorkingDir+"/"+strFileName;
        }
        else
        {
        	strSBMLFile = strWorkingDir+"/"+strFilePath+"/"+strFileName;
        }
        
        GIOL.write(strSBMLFile,driver);
    }
    
    public static void dumpShellCommandToDisk(StringBuffer driver,LoadXMLPropFile _xmlPropTree) throws Exception
    {
        // I have populated the string buffer, dump that mofo
        String strWorkingDir = _xmlPropTree.getProperty("//working_directory/text()");
        String strFileName = _xmlPropTree.getProperty("//DriverFile/driver_filename/text()");
        String strFilePath = _xmlPropTree.getProperty("//DriverFile/driver_path/text()");
        
        String strSBMLFile = "";
        if (strFilePath.isEmpty())
        {
        	strSBMLFile = strWorkingDir+"/"+strFileName;
        }
        else
        {
        	strSBMLFile = strWorkingDir+"/"+strFilePath+"/"+strFileName;
        }
        
        GIOL.write(strSBMLFile,driver);
    }
    
    public static void dumpSunsialsPluginToDisk(StringBuffer driver,LoadXMLPropFile _xmlPropTree) throws Exception
    {
        // I have populated the string buffer, dump that mofo
        String strWorkingDir = _xmlPropTree.getProperty("//working_directory/text()");
        String strFilePath = _xmlPropTree.getProperty("//MassBalanceFunction/massbalance_path/text()");
        String strFileName = "SolveSundialsModel.m";
     
        
        String strSBMLFile = "";
        if (strFilePath.isEmpty())
        {
        	strSBMLFile = strWorkingDir+"/"+strFileName;
        }
        else
        {
        	strSBMLFile = strWorkingDir+"/"+strFilePath+"/"+strFileName;
        }
        
        GIOL.write(strSBMLFile,driver);
    }
    
    public static void dumpLSODECallWrapperSundialsToDisk(StringBuffer driver,LoadXMLPropFile _xmlPropTree) throws Exception
    {
        // I have populated the string buffer, dump that mofo
        String strWorkingDir = _xmlPropTree.getProperty("//working_directory/text()");
        String strFilePath = _xmlPropTree.getProperty("//MassBalanceFunction/massbalance_path/text()");
        String strFileName = "LSODECallWrapper.m";
        
        String strSBMLFile = "";
        if (strFilePath.isEmpty())
        {
        	strSBMLFile = strWorkingDir+"/"+strFileName;
        }
        else
        {
        	strSBMLFile = strWorkingDir+"/"+strFilePath+"/"+strFileName;
        }
        
        GIOL.write(strSBMLFile,driver);
    }
    

	
	public static void organizeSpeciesByCompartment(Properties _propTable,Model model_wrapper,Vector<Species> vecSpecies) throws Exception
	{
		// Get species -
		ListOfSpecies list_species = model_wrapper.getListOfSpecies();
		long NUMBER_OF_SPECIES = model_wrapper.getNumSpecies();
		
		// Get the list of compartments -
		ListOfCompartments compartments = model_wrapper.getListOfCompartments();
		long NUMBER_OF_COMPARTMENTS = model_wrapper.getNumCompartments();

		for (long index=0;index<NUMBER_OF_COMPARTMENTS;index++)
		{
			// Get the current compartment -
			Compartment current_compartment = compartments.get(index);
			String strCompartmentID = current_compartment.getId();
			
			// Collect the species in this compartment -
			for (long species_index=0;species_index<NUMBER_OF_SPECIES;species_index++)
			{
				// Get the species -
				Species tmp = list_species.get(species_index);
				
				// Check the compartment -
				String strCompartment = tmp.getCompartment();
				if (strCompartment.equalsIgnoreCase(strCompartmentID))
				{
					vecSpecies.addElement(tmp);
				}
			}
		}
	}
	
	
	// Util method to dump species list to disk -
	public static void dumpSpeciesToDisk(Properties _propTable,Model model_wrapper) throws Exception
	{
		// Method attributes =
		StringBuffer buffer = new StringBuffer();
		Vector<Species> vecSpecies = new Vector<Species>();
		
		// Get species -
		ListOfSpecies list_species = model_wrapper.getListOfSpecies();
		long NUMBER_OF_SPECIES = model_wrapper.getNumSpecies();
		
		// Get the list of compartments -
		ListOfCompartments compartments = model_wrapper.getListOfCompartments();
		long NUMBER_OF_COMPARTMENTS = model_wrapper.getNumCompartments();

		int outer_counter = 1;
		for (long index=0;index<NUMBER_OF_COMPARTMENTS;index++)
		{
			// Get the current compartment -
			Compartment current_compartment = compartments.get(index);
			String strCompartmentID = current_compartment.getId();
			
			// Collect the species in this compartment -
			for (long species_index=0;species_index<NUMBER_OF_SPECIES;species_index++)
			{
				// Get the species -
				Species tmp = list_species.get(species_index);
				
				// Check the compartment -
				String strCompartment = tmp.getCompartment();
				if (strCompartment.equalsIgnoreCase(strCompartmentID))
				{
					vecSpecies.addElement(tmp);
				}
			}
			
			// Ok, when I get here I have collected all the species in the current compartment - write them to the buffer
			int NUM_SPECIES_IN_COMPARTMENT = vecSpecies.size();
			int inner_counter = 1;
			for (int buffer_index=0;buffer_index<NUM_SPECIES_IN_COMPARTMENT;buffer_index++)
			{
				// Get the species -
				Species tmp = vecSpecies.get(buffer_index);
				buffer.append(tmp.getId());
				buffer.append("\t");
				buffer.append(inner_counter);
				buffer.append("\t");
				buffer.append(outer_counter);
				buffer.append("\t");
				buffer.append(strCompartmentID);
				buffer.append("\n");
				
				// update the counter -
				inner_counter++;
				
				// Update the outer_counter -
				outer_counter++;
			}
			
			// Ok, clear out the species vec and go around again -
			vecSpecies.removeAllElements();
		}
		
		// Get the path and dump -2- disk 
		// Create the path string -
		String strPath = "./"+_propTable.getProperty("PATH_NETWORK_DIRECTORY")+"/"+_propTable.getProperty("OUTPUT_SPECIES_FILENAME");
        GIOL.write(strPath,buffer);
	}
		
	
	// Build the stoichiometric matrix -
    public static void buildStoichiometricMatrix(double[][] dblSTMatrix,Model model_wrapper,Vector<Reaction> listRates) throws Exception
    {
        
        // Get the dimension of the system -
        int NUMBER_OF_SPECIES = 0; 
        int NUMBER_OF_RATES = 0;
        
        // Get the system dimension -
        NUMBER_OF_SPECIES = (int)model_wrapper.getNumSpecies(); 
        NUMBER_OF_RATES = (int)listRates.size(); 
        
        // //System.out.println("Dimension "+NUMBER_OF_SPECIES+" by "+NUMBER_OF_RATES);
        
        // Go through and put everything as zeros by default -
        for (int scounter=0;scounter<NUMBER_OF_SPECIES;scounter++)
        {
            for (int rcounter=0;rcounter<NUMBER_OF_RATES;rcounter++)
            {
                dblSTMatrix[scounter][rcounter]=0.0;
            }
        }
        
        ListOf listSpecies = model_wrapper.getListOfSpecies();
        for (int scounter=0;scounter<NUMBER_OF_SPECIES;scounter++)
        {
            // Get the species reference -
            Species species = (Species)listSpecies.get(scounter);
            String strSpecies = species.getId();
            
            // Ok, I need to go through the rates and determine if this species is involved -
            for (int rcounter=0;rcounter<NUMBER_OF_RATES;rcounter++)
            {
                // Get the Reaction object -
                Reaction rxn_obj = (Reaction)listRates.get(rcounter);
                
                // Get the 'radius' of this rate -
                int NUMBER_OF_REACTANTS = (int)rxn_obj.getNumReactants();
                int NUMBER_OF_PRODUCTS = (int)rxn_obj.getNumProducts();
                
                // go through the reactants of this reaction -
                for (int reactant_index=0;reactant_index<NUMBER_OF_REACTANTS;reactant_index++)
                {
                    // Get the species reference -
                    SpeciesReference species_ref = rxn_obj.getReactant(reactant_index);
                    String strReactant = species_ref.getSpecies();
                    
                    // //System.out.println("Checking - "+strReactant+" against "+strSpecies);
                    
                    
                    if (strReactant.equalsIgnoreCase(strSpecies))
                    {       
                    	             	
                    	double tmp = species_ref.getStoichiometry();
                    	//System.out.println("Reactant "+strReactant+" has a st.coeff of "+tmp+" in reaction "+rcounter);
                        if (tmp>=0.0)
                        {
                            dblSTMatrix[scounter][rcounter]=-1.0*tmp;
                        }
                        else
                        {
                            dblSTMatrix[scounter][rcounter]=tmp;
                        }
                    }
                    
                }
                
                // go through the products of this reaction -
                for (int product_index=0;product_index<NUMBER_OF_PRODUCTS;product_index++)
                {
                    // Get the species reference -
                    SpeciesReference species_ref = rxn_obj.getProduct(product_index);
                    String strProduct = species_ref.getSpecies();
                    
                    ////System.out.println("Comparing NP="+NUMBER_OF_PRODUCTS+" to "+strProduct+"="+strSpecies+"?");
                    
                    if (strProduct.equalsIgnoreCase(strSpecies))
                    {
                        dblSTMatrix[scounter][rcounter]=species_ref.getStoichiometry();
                    }
                }
            }
        }
    }
	
	// check for reversible rates - insert *directly after* the reversible rate  
    public static void convertReversibleRates(Model model_wrapper,Vector<Reaction> vecReactions) throws Exception
    { 	
        // We need to treat the reversible reactions -
        int NUMBER_OF_RATES_INITIAL = (int)model_wrapper.getNumReactions();
        ListOf rate_list_initial = model_wrapper.getListOfReactions();
        for (int rate_counter=0;rate_counter<NUMBER_OF_RATES_INITIAL;rate_counter++)
        {
            // Get Reaction =
            Reaction rxn_local = (Reaction)rate_list_initial.get(rate_counter);
            String strOldName = rxn_local.getName();
            String strOldID = rxn_local.getId();
            
            // Check to see if this is reversible -
            if (rxn_local.getReversible())
            {
                // If the rate is reversible then I need to split -
           
                // Create a new reaction object -
                Reaction rxn_new = new Reaction();
                String strNewName = "_REVERSE_"+strOldName;
                String strNewID = "_REVERSE_"+strOldID;
                rxn_new.setName(strNewName);
                rxn_new.setId(strNewID);
                
                // Add the reactants to the products list and vice-versa -
                int NPRODUCTS_LOCAL = (int)rxn_local.getNumProducts();
                int NREACTANTS_LOCAL = (int)rxn_local.getNumReactants();
                ListOf reactants_list_local = rxn_local.getListOfReactants();
                ListOf products_list_local = rxn_local.getListOfProducts();
                
                for (int index =0;index<NPRODUCTS_LOCAL;index++)
                {
                    rxn_new.addReactant((SpeciesReference)products_list_local.get(index));
                }
                
                for (int index =0;index<NREACTANTS_LOCAL;index++)
                {
                    rxn_new.addProduct((SpeciesReference)reactants_list_local.get(index));
                }
               
                // add the forword reaction -
                vecReactions.addElement(rxn_local);
                
                // add the back reaction -
                vecReactions.addElement(rxn_new);
                
                // Ok, I need to add the reaction to the model_wrapper -
                //model_wrapper.addReaction(rxn_new);
            }
            else
            {
            	vecReactions.add(rxn_local);
            }
        }
    }
}
	
